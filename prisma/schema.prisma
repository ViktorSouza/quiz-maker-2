// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 String     @id @default(auto()) @map("_id") @db.ObjectId
  email              String     @unique
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  name               String
  favoriteQuizzesIds String[]   @db.ObjectId
  favoriteQuizzes    Quiz[]     @relation("favorite quiz", fields: [favoriteQuizzesIds], references: [id])
  questions          Question[]
  UserPlay           UserPlay[]
  Quiz               Quiz[]     @relation("user's quiz")
}

model Question {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  User          User?      @relation(fields: [userId], references: [id])
  userId        String     @db.ObjectId
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  question      String
  explanation   String?
  options       String[]
  correctOption String
  UserPlay      UserPlay[]
  Quiz          Quiz?      @relation(fields: [quizId], references: [id])
  quizId        String     @db.ObjectId
}

enum Visibility {
  Private
  Public
}

model Quiz {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String
  visibility  Visibility
  description String?
  tags        String[]

  User      User?      @relation("user's quiz", fields: [userId], references: [id])
  userId    String     @db.ObjectId
  questions Question[]
  UserPlay  UserPlay[]
  usersIds  String[]   @db.ObjectId
  users     User[]     @relation("favorite quiz", fields: [usersIds], references: [id])
}

model UserPlay {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  User           User?    @relation(fields: [userId], references: [id])
  Question       Question @relation(fields: [questionId], references: [id])
  questionId     String   @db.ObjectId
  userId         String   @db.ObjectId
  selectedOption String
  correctOption  String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  Quiz           Quiz?    @relation(fields: [quizId], references: [id])
  quizId         String?  @db.ObjectId
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
